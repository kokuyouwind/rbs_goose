class RbsGoose::Configuration
  @llm: LLMConfig
  extend Forwardable
  LLMConfig: Struct[client: ::Langchain::LLM::Base, mode: Symbol]
  TemplateConfig: Struct[instruction: String, example_groups: Array[untyped], template_class: Class]
  def initialize: () ?{ () -> void } -> void
  attr_accessor llm: LLMConfig
  attr_accessor infer_template: TemplateConfig
  attr_accessor fix_error_template: TemplateConfig
  def use_open_ai: (String open_ai_access_token, ?model_name: String, ?mode: Symbol, ?llm_options: Hash[untyped, untyped], ?default_options: Hash[untyped, untyped]) -> void
  def use_anthropic: (String access_token, ?model_name: String, ?mode: Symbol, ?default_options: Hash[untyped, untyped]) -> void
  def use_ollama: (?url: String, ?model_name: String, ?mode: Symbol, ?default_options: Hash[untyped, untyped]) -> void
  def_delegator llm, :client, :llm_client
  def_delegator llm, :mode, :llm_mode
  def_delegator infer_template, :instruction, :infer_instruction
  def_delegator infer_template, :example_groups, :infer_example_groups
  private def default_infer_template: () -> TemplateConfig
  private def default_fix_error_template: () -> TemplateConfig
  private def default_infer_instruction: () -> String
  private def default_infer_example_groups: () -> Array[untyped]
  private def default_fix_error_instruction: () -> String
  private def default_fix_error_example_groups: () -> Array[untyped]
end